#include <iostream>
#include <fstream>
#include <vector>
#include <array>
#include <sys/random.h>
#include <sys/ptrace.h>
#include <cstdint>

typedef uint8_t byte;
typedef uint16_t address;

std::vector<byte> encrypted_vm = {
    14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 10, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
    253, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 1, 0, 128, 0, 0, 0, 0, 0,
    0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 253, 1, 1, 1, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 117, 60, 0, 1, 0, 0, 0, 0, 0, 0, 0, 244, 2, 1, 0, 0, 64, 0, 0,
    0, 0, 0, 0, 0, 37, 3, 0, 1, 2, 0, 56, 0, 0, 0, 0, 0, 0, 0, 55, 1, 3, 0, 57,
    0, 0, 0, 0, 0, 0, 0, 228, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 253, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 55, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 160, 255, 255, 255, 255, 255, 255, 255, 237, 1, 1,
    1, 10, 253, 1, 1, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 8, 0, 0,
    0, 0, 0, 0, 0, 117, 61, 1, 0, 117, 62, 1, 1, 117, 63, 1, 62, 117, 0, 1, 63,
    228, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 228, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 228, 1, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 228, 1, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 253, 0,
    1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 253,
    0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0,
    253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 20, 0, 0, 0, 0, 0,
    0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 15, 0, 0, 0,
    0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 5, 0, 0,
    0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 21,
    0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0,
    6, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0,
    0, 14, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228,
    1, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    228, 1, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 228, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 228, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 228, 1, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 228, 1, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 253, 0,
    1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 253,
    0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0,
    253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 18, 0, 0, 0, 0, 0,
    0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 21, 0, 0, 0,
    0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 20, 0,
    0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0,
    16, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1,
    0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    228, 1, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 228, 1, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 228, 1, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 253,
    0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0,
    253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 17, 0, 0, 0, 0, 0,
    0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 9, 0, 0, 0, 0,
    0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 14, 0, 0,
    0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 6, 0,
    0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0,
    15, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1,
    0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    228, 1, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 228, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 228, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 228, 1, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 253, 0,
    1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 253,
    0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
    253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 10, 0, 0, 0, 0, 0,
    0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 16, 0, 0, 0,
    0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 18, 0,
    0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 5,
    0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0,
    15, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 228, 1,
    0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    228, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 228, 1, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 228, 1, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 228, 1, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 253, 0, 1, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 117, 64, 1, 0, 133, 1, 0, 0, 125, 64, 81, 138, 0,
    0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 93, 153,
    136, 106, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0,
    0, 244, 37, 112, 253, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
    133, 1, 0, 0, 54, 48, 85, 167, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0,
    0, 0, 0, 133, 1, 0, 0, 193, 21, 158, 72, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0,
    0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 75, 184, 205, 245, 0, 0, 0, 0, 253, 0, 1,
    0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 246, 188, 255, 192, 0, 0, 0, 0,
    253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 126, 125, 63, 37, 0,
    0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 53, 213,
    63, 233, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0,
    72, 100, 205, 214, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
    133, 1, 0, 0, 228, 10, 34, 1, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0,
    0, 0, 0, 133, 1, 0, 0, 35, 208, 6, 216, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0,
    0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 169, 110, 78, 232, 0, 0, 0, 0, 253, 0, 1,
    0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 216, 53, 1, 35, 0, 0, 0, 0,
    253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 52, 232, 122, 194,
    0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 244, 43,
    41, 245, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0,
    193, 26, 113, 70, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133,
    1, 0, 0, 10, 132, 10, 169, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0,
    0, 0, 133, 1, 0, 0, 240, 190, 27, 253, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0,
    0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 229, 16, 120, 104, 0, 0, 0, 0, 253, 0, 1,
    0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 27, 252, 55, 140, 0, 0, 0, 0,
    253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 198, 110, 253, 255,
    0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 172,
    190, 103, 136, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1,
    0, 0, 212, 254, 150, 108, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0,
    0, 133, 1, 0, 0, 172, 119, 191, 253, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0,
    0, 0, 0, 0, 0, 133, 1, 0, 0, 52, 129, 156, 165, 0, 0, 0, 0, 253, 0, 1, 0,
    0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 229, 155, 201, 74, 0, 0, 0, 0,
    253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 138, 86, 109, 246,
    0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 193,
    178, 128, 191, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1,
    0, 0, 228, 5, 125, 39, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
    133, 1, 0, 0, 31, 142, 44, 234, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0,
    0, 0, 0, 133, 1, 0, 0, 130, 169, 143, 213, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4,
    0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 219, 26, 102, 3, 0, 0, 0, 0, 253, 0, 1,
    0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 202, 230, 59, 217, 0, 0, 0, 0,
    253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 82, 95, 88, 231, 0,
    0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 118, 58,
    194, 32, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0,
    225, 44, 242, 195, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
    133, 1, 0, 0, 210, 180, 127, 244, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0,
    0, 0, 0, 0, 133, 1, 0, 0, 18, 182, 66, 68, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4,
    0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 235, 115, 188, 170, 0, 0, 0, 0, 253, 0,
    1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 83, 68, 194, 252, 0, 0, 0,
    0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 6, 112, 101, 102,
    0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 195,
    231, 27, 142, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1,
    0, 0, 39, 187, 245, 255, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0,
    0, 133, 1, 0, 0, 121, 128, 123, 134, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0,
    0, 0, 0, 0, 0, 133, 1, 0, 0, 187, 54, 163, 110, 0, 0, 0, 0, 253, 0, 1, 0,
    0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 130, 178, 9, 254, 0, 0, 0, 0, 253,
    0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 218, 127, 224, 163, 0, 0,
    0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 8, 162, 243,
    76, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 126,
    3, 8, 247, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0,
    0, 67, 209, 253, 189, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
    133, 1, 0, 0, 137, 195, 185, 41, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0,
    0, 0, 0, 0, 133, 1, 0, 0, 167, 148, 20, 235, 0, 0, 0, 0, 253, 0, 1, 0, 0,
    4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 50, 166, 77, 212, 0, 0, 0, 0, 253, 0,
    1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 94, 25, 170, 5, 0, 0, 0, 0,
    253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 10, 162, 108, 218,
    0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 32, 172,
    93, 230, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0,
    224, 150, 130, 30, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
    133, 1, 0, 0, 116, 131, 101, 197, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0,
    0, 0, 0, 0, 133, 1, 0, 0, 75, 86, 209, 243, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4,
    0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 229, 242, 18, 66, 0, 0, 0, 0, 253, 0, 1,
    0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 35, 247, 106, 172, 0, 0, 0, 0,
    253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 231, 183, 99, 252,
    0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 133, 1, 0, 0, 101,
    193, 80, 100, 0, 0, 0, 0, 253, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 117, 30,
    0, 91, 146, 168, 71, 0, 0, 0, 0, 117, 31, 0, 189, 203, 239, 195, 0, 0, 0,
    0, 117, 32, 0, 245, 224, 44, 143, 0, 0, 0, 0, 117, 33, 0, 165, 234, 81,
    180, 0, 0, 0, 0, 117, 40, 1, 60, 37, 3, 0, 1, 40, 1, 62, 55, 1, 3, 0, 134,
    2, 0, 0, 0, 0, 0, 0, 117, 20, 1, 30, 117, 21, 1, 31, 117, 22, 1, 32, 117,
    23, 1, 33, 117, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 3, 0, 1, 50, 0, 64, 0,
    0, 0, 0, 0, 0, 0, 55, 1, 3, 0, 25, 2, 0, 0, 0, 0, 0, 0, 246, 0, 1, 50, 0,
    16, 0, 0, 0, 0, 0, 0, 0, 37, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 1,
    3, 0, 26, 0, 0, 0, 0, 0, 0, 0, 195, 1, 1, 21, 1, 22, 39, 2, 1, 22, 195, 2,
    1, 2, 1, 23, 186, 24, 1, 1, 1, 2, 117, 51, 1, 50, 37, 3, 1, 1, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 55, 1, 3, 0, 65, 0, 0, 0, 0, 0, 0, 0, 195, 1, 1, 21, 1,
    23, 39, 2, 1, 23, 195, 2, 1, 2, 1, 22, 186, 24, 1, 1, 1, 2, 117, 51, 1, 50,
    24, 51, 1, 51, 0, 5, 0, 0, 0, 0, 0, 0, 0, 253, 51, 1, 51, 0, 7, 0, 0, 0, 0,
    0, 0, 0, 244, 51, 1, 51, 0, 16, 0, 0, 0, 0, 0, 0, 0, 37, 3, 1, 1, 0, 0, 2,
    0, 0, 0, 0, 0, 0, 0, 55, 1, 3, 0, 55, 0, 0, 0, 0, 0, 0, 0, 162, 24, 1, 21,
    1, 22, 162, 24, 1, 24, 1, 23, 117, 51, 1, 50, 24, 51, 1, 51, 0, 3, 0, 0, 0,
    0, 0, 0, 0, 253, 51, 1, 51, 0, 5, 0, 0, 0, 0, 0, 0, 0, 244, 51, 1, 51, 0,
    16, 0, 0, 0, 0, 0, 0, 0, 37, 3, 1, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 55, 1,
    3, 0, 46, 0, 0, 0, 0, 0, 0, 0, 39, 1, 1, 23, 186, 1, 1, 1, 1, 22, 162, 24,
    1, 1, 1, 21, 117, 51, 1, 50, 24, 51, 1, 51, 0, 7, 0, 0, 0, 0, 0, 0, 0, 244,
    51, 1, 51, 0, 16, 0, 0, 0, 0, 0, 0, 0, 253, 25, 1, 20, 1, 24, 117, 98, 1,
    20, 117, 99, 1, 24, 24, 1, 1, 50, 0, 4, 0, 0, 0, 0, 0, 0, 0, 253, 1, 1, 64,
    1, 1, 93, 1, 1, 1, 253, 25, 1, 25, 1, 1, 24, 1, 1, 51, 0, 4, 0, 0, 0, 0, 0,
    0, 0, 253, 1, 1, 40, 1, 1, 93, 1, 1, 1, 253, 25, 1, 25, 1, 1, 195, 25, 1,
    25, 0, 255, 255, 255, 255, 0, 0, 0, 0, 253, 1, 1, 63, 1, 50, 14, 26, 1, 1,
    112, 71, 1, 25, 1, 26, 54, 2, 0, 32, 0, 0, 0, 0, 0, 0, 0, 1, 26, 204, 2, 1,
    25, 1, 2, 253, 71, 1, 71, 1, 2, 253, 71, 1, 71, 1, 21, 117, 70, 1, 23, 117,
    72, 1, 21, 117, 73, 1, 22, 195, 20, 1, 70, 0, 255, 255, 255, 255, 0, 0, 0,
    0, 195, 21, 1, 71, 0, 255, 255, 255, 255, 0, 0, 0, 0, 195, 22, 1, 72, 0,
    255, 255, 255, 255, 0, 0, 0, 0, 195, 23, 1, 73, 0, 255, 255, 255, 255, 0,
    0, 0, 0, 253, 50, 1, 50, 0, 1, 0, 0, 0, 0, 0, 0, 0, 55, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 205, 253, 255, 255, 255, 255, 255, 255, 253, 40, 1, 40, 0, 64,
    0, 0, 0, 0, 0, 0, 0, 253, 30, 1, 30, 1, 20, 253, 31, 1, 31, 1, 21, 253, 32,
    1, 32, 1, 22, 253, 33, 1, 33, 1, 23, 55, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 103,
    253, 255, 255, 255, 255, 255, 255, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 30,
    133, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 31, 133, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1,
    32, 133, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 33, 177
};

void check_ptrace() {
    if (ptrace(PTRACE_TRACEME, 0, NULL, 0) == -1) {
        exit(137);
    }
}

class VM {
    const int RIP = 255;

    enum Opcodes {
        OP_ADD   = 253,
        OP_SUB   =  54,
        OP_MUL   =  24,
        OP_DIV   = 246,
        OP_MOD   = 244,
        OP_XOR   = 162,
        OP_AND   = 195,
        OP_OR    = 186,
        OP_RSH   = 204,
        OP_LSH   = 112,
        OP_MOV   = 117,
        OP_NEG   =  29,
        OP_INV   =  39,
        OP_CMP   =  37,
        OP_JMP   = 157,
        OP_RJMP  =  55,
        OP_LDR8  =  14,
        OP_LDR16 =  59,
        OP_LDR32 =  93,
        OP_LDR64 =  69,
        OP_STR8  = 228,
        OP_STR16 = 114,
        OP_STR32 = 133,
        OP_STR64 = 237,
        OP_HLT   = 177,
    };

    std::array<uint64_t, 256> registers;
    bool halted = false;

    uint64_t& __attribute__((always_inline)) rip() {
        return registers[RIP];
    }


    uint64_t __attribute__((always_inline)) load_uint(std::vector<byte>::iterator it, int size) {
        uint64_t res = 0;
        uint64_t power = 0;

        while (size--) {
            res += ((uint64_t)*it) << power;
            power += 8;
            it++;
        }
        return res;
    }

    void __attribute__((always_inline)) store_uint(uint64_t n, std::vector<byte>::iterator it, int size) {
        while (size--) {
            *it = n & 0xff;
            n >>= 8;
            it++;
        }
    }

    uint64_t __attribute__((always_inline)) parse_arg() {
        if (rom[rip()++] == 0) {
            // load immediate
            auto arg = load_uint(rom.begin() + rip(), 8);
            rip() += 8;
            return arg;
        }
        // load register
        return registers[rom[rip()++]];
    }

    template<uint64_t op(uint64_t, uint64_t)>
    void __attribute__((always_inline)) operation2args() {
        auto& receiver = registers[rom[rip()++]];
        auto a = parse_arg();
        auto b = parse_arg();

        receiver = op(a, b);
    }

    template<uint64_t op(uint64_t)>
    void __attribute__((always_inline)) operation1args() {
        auto& receiver = registers[rom[rip()++]];
        auto a = parse_arg();

        receiver = op(a);
    }

    void __attribute__((always_inline)) jmp() {
        auto cond = parse_arg();
        auto target = parse_arg();
        if (cond != 0) {
            rip() = target;
        }
    }

    void __attribute__((always_inline)) rjmp() {
        auto cond = parse_arg();
        auto target = int64_t(parse_arg());
        if (cond != 0) {
            /* rip() += int64_t(parse_arg()); */
            rip() += target;
        }
    }

    void __attribute__((always_inline)) cmp() {
        auto& receiver = registers[rom[rip()++]];

        auto type = rom[rip()++];
        auto a = parse_arg();
        auto b = parse_arg();


        switch (type) {
            case 0: receiver = a == b; break;
            case 1: receiver = a != b; break;
            case 2: receiver = a < b; break;
            case 3: receiver = a > b; break;
            case 4: receiver = a <= b; break;
            case 5: receiver = a >= b; break;
            case 6: receiver = int64_t(a) < int64_t(b); break;
            case 7: receiver = int64_t(a) > int64_t(b); break;
            case 8: receiver = int64_t(a) <= int64_t(b); break;
            case 9: receiver = int64_t(a) >= int64_t(b); break;
        }
    }

    template<int size>
    void __attribute__((always_inline)) str() {
        auto a = parse_arg();
        auto b = parse_arg();
        store_uint(b, ram.begin() + a, size);
    }

    template<int size>
    void __attribute__((always_inline)) ldr() {
        auto& receiver = registers[rom[rip()++]];
        auto a = parse_arg();

        receiver = load_uint(ram.begin() + a, size);
    }

    void process_instruction() {

        switch (rom[rip()++]) {
            case OP_ADD  :
                operation2args<([](uint64_t a, uint64_t b) -> uint64_t { return a + b; })>(); 
                break;
            case OP_SUB  : operation2args<([](uint64_t a, uint64_t b) -> uint64_t __attribute__((always_inline)) { return a - b; })>(); break;
            case OP_MUL  : operation2args<([](uint64_t a, uint64_t b) -> uint64_t __attribute__((always_inline)) { return a * b; })>(); break;
            case OP_DIV  : operation2args<([](uint64_t a, uint64_t b) -> uint64_t __attribute__((always_inline)) { return a / b; })>(); break;
            case OP_MOD  : operation2args<([](uint64_t a, uint64_t b) -> uint64_t __attribute__((always_inline)) { return a % b; })>(); break;
            case OP_XOR  : operation2args<([](uint64_t a, uint64_t b) -> uint64_t __attribute__((always_inline)) { return a ^ b; })>(); break;
            case OP_AND  : operation2args<([](uint64_t a, uint64_t b) -> uint64_t __attribute__((always_inline)) { return a & b; })>(); break;
            case OP_OR   : operation2args<([](uint64_t a, uint64_t b) -> uint64_t __attribute__((always_inline)) { return a | b; })>(); break;
            case OP_RSH  : operation2args<([](uint64_t a, uint64_t b) -> uint64_t __attribute__((always_inline)) { return a >> b; })>(); break;
            case OP_LSH  : operation2args<([](uint64_t a, uint64_t b) -> uint64_t __attribute__((always_inline)) { return a << b; })>(); break;
            case OP_MOV  : operation1args<([](uint64_t a) -> uint64_t __attribute__((always_inline)) { return a; })>(); break;
            case OP_NEG  : operation1args<([](uint64_t a) -> uint64_t __attribute__((always_inline)) { return -a; })>(); break;
            case OP_INV  : operation1args<([](uint64_t a) -> uint64_t __attribute__((always_inline)) { return ~a; })>(); break;

            case OP_CMP  : cmp(); break;
            case OP_JMP  : jmp(); break;
            case OP_RJMP : rjmp(); break;

            case OP_LDR8 : ldr<1>(); break;
            case OP_LDR16: ldr<2>(); break;
            case OP_LDR32: ldr<4>(); break;
            case OP_LDR64: ldr<8>(); break;

            case OP_STR8 : str<1>(); break;
            case OP_STR16: str<2>(); break;
            case OP_STR32: str<4>(); break;
            case OP_STR64: str<8>(); break;
            case OP_HLT: halted = true; break;
        }
    }

    public:
    std::vector<byte> ram;
    std::vector<byte> rom;
    void run() {
        halted = false;

        for(auto& reg: registers) {
            reg = 0;
        }

        while (!halted) {
            process_instruction();
        }
    }
};

int main(int argc, char *argv[]) {

    if (argc != 3) {
        return 1;
    }

    check_ptrace();

    std::ifstream in_file(argv[1], std::ios::binary);
    std::ofstream out_file(argv[2], std::ios::binary);

    if (!in_file) {
        return 2;
    }

    if (!out_file) {
        return 2;
    }

    VM vm;
    vm.rom = encrypted_vm;
    vm.ram.resize(4096);


    char c;
    while (in_file >> c) {
        char salt[16];
        getrandom(salt, 16, 0);

        for(int i = 0; i < 16; i++) {
            out_file << salt[i];
        }

        vm.ram[0] = 17;
        for(int i = 0; i < 16; i++) {
            vm.ram[i + 1] = salt[i];
        }

        vm.ram[17] = c;
        vm.run();

        for(int i = 0; i < 16; i++) {
            out_file << vm.ram[i];
        }

    }
}
